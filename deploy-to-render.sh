#!/bin/bash

# Strapi CMS Multi-Site Deployment Script for Render
# This script helps deploy or redeploy the Strapi CMS with existing PostgreSQL database

echo "üöÄ Deploying Strapi CMS Multi-Site Architecture to Render"
echo "=========================================================="

# Configuration
GITHUB_REPO="https://github.com/richardhopp/realestateabroad-cms"
SERVICE_NAME="realestateabroad-cms"
DATABASE_SERVICE_ID="dpg-d2jhc3be5dus739462a0-a"
EXPECTED_URL="https://realestateabroad-cms.onrender.com"

echo ""
echo "üìã Deployment Configuration:"
echo "  - Repository: $GITHUB_REPO"
echo "  - Service Name: $SERVICE_NAME"
echo "  - Database: $DATABASE_SERVICE_ID (existing PostgreSQL)"
echo "  - Expected URL: $EXPECTED_URL"
echo "  - Node Version: 20.19.4"
echo "  - Strapi Version: 4.15.5"

echo ""
echo "‚úÖ Recent Changes Pushed to GitHub:"
echo "  - Multi-site architecture implemented"
echo "  - Site content type with key, name, domains"
echo "  - Blog Post updated with Site relation"
echo "  - RBAC policies and media partitioning"
echo "  - Bootstrap with SEO-optimized content"
echo "  - render.yaml configured for existing DB"

echo ""
echo "üéØ Deployment Options:"
echo ""
echo "OPTION 1 - Manual Deployment via Render Dashboard:"
echo "==========================================="
echo "1. Go to: https://dashboard.render.com"
echo "2. Find existing '$SERVICE_NAME' service OR create new one"
echo "3. If creating new:"
echo "   - Click 'New +' ‚Üí 'Web Service'"
echo "   - Connect GitHub: $GITHUB_REPO"
echo "   - Branch: master"
echo "   - Build Command: npm install && npm run build"
echo "   - Start Command: npm start"
echo "4. If service exists, trigger manual deploy"
echo "5. Environment variables are auto-configured via render.yaml"

echo ""
echo "OPTION 2 - Check Current Deployment Status:"
echo "=========================================="
echo "Current service appears to be running but outdated."
echo "API endpoints return 404 - indicates missing content types."
echo ""

# Test current deployment
echo "üîç Testing Current Deployment:"
echo "------------------------------"

echo -n "Admin Panel: "
if curl -s --max-time 10 "$EXPECTED_URL/admin" | grep -q "JavaScript"; then
    echo "‚úÖ ACCESSIBLE (requires JavaScript)"
else
    echo "‚ùå NOT ACCESSIBLE"
fi

echo -n "Blog Posts API: "
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$EXPECTED_URL/api/blog-posts")
if [ "$HTTP_CODE" = "200" ]; then
    echo "‚úÖ WORKING (HTTP $HTTP_CODE)"
elif [ "$HTTP_CODE" = "404" ]; then
    echo "‚ùå NOT FOUND (HTTP $HTTP_CODE) - Missing content types"
else
    echo "‚ö†Ô∏è  ERROR (HTTP $HTTP_CODE)"
fi

echo -n "Sites API: "
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$EXPECTED_URL/api/sites")
if [ "$HTTP_CODE" = "200" ]; then
    echo "‚úÖ WORKING (HTTP $HTTP_CODE)"
elif [ "$HTTP_CODE" = "404" ]; then
    echo "‚ùå NOT FOUND (HTTP $HTTP_CODE) - Missing content types"
else
    echo "‚ö†Ô∏è  ERROR (HTTP $HTTP_CODE)"
fi

echo ""
echo "üìä Analysis:"
if [ "$HTTP_CODE" = "404" ]; then
    echo "‚ùå DEPLOYMENT ISSUE DETECTED:"
    echo "  - Strapi is running but API endpoints are missing"
    echo "  - This indicates the service is using old code"
    echo "  - Deployment needs to be triggered to use latest code"
    echo ""
    echo "üîß RECOMMENDED ACTION:"
    echo "  1. Go to Render Dashboard: https://dashboard.render.com"
    echo "  2. Find the '$SERVICE_NAME' service"
    echo "  3. Click 'Manual Deploy' to force redeploy"
    echo "  4. Wait 5-10 minutes for build to complete"
    echo "  5. Run this script again to verify deployment"
else
    echo "‚úÖ Service appears to be working correctly"
fi

echo ""
echo "üîß Post-Deployment Checklist:"
echo "=============================="
echo "After successful deployment:"
echo ""
echo "1. ‚úÖ Access admin panel: $EXPECTED_URL/admin"
echo "2. ‚úÖ Create first admin user when prompted"
echo "3. ‚úÖ Verify bootstrap created content:"
echo "   - Sites: realestateabroad, aparthotel"  
echo "   - Sample blog posts with SEO content"
echo "   - Public API permissions enabled"
echo "4. ‚úÖ Generate API token:"
echo "   - Settings ‚Üí API Tokens ‚Üí Create Token"
echo "   - Full access permissions"
echo "   - Copy token for Next.js integration"
echo "5. ‚úÖ Update Next.js environment variables:"
echo "   - NEXT_PUBLIC_STRAPI_URL=$EXPECTED_URL"
echo "   - STRAPI_API_TOKEN=[generated token]"

echo ""
echo "üß™ Test API Endpoints After Deployment:"
echo "======================================"
echo "curl $EXPECTED_URL/api/blog-posts"
echo "curl $EXPECTED_URL/api/sites"
echo "curl \"$EXPECTED_URL/api/blog-posts?site=realestateabroad\""

echo ""
echo "üìö Troubleshooting:"
echo "=================="
echo "If deployment fails:"
echo "‚Ä¢ Check Render service logs for errors"
echo "‚Ä¢ Verify Node.js version is 20.19.4"
echo "‚Ä¢ Confirm PostgreSQL database is accessible"
echo "‚Ä¢ Ensure all environment variables are set via render.yaml"
echo "‚Ä¢ Check GitHub repository has latest code"

echo ""
echo "‚ú® Expected Result:"
echo "=================="
echo "üéØ Working Strapi CMS at: $EXPECTED_URL"
echo "üîó API accessible to Next.js site for blog content"
echo "üè¢ Multi-site support for realestateabroad.com and future sites"
echo "üì± SEO-optimized content ready for production"

echo ""
echo "=========================================================="
echo "üìû Next: Run task #10 (Generate API tokens and test integration)"
echo "=========================================================="